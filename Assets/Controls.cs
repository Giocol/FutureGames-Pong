//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""070c0006-ed8b-4062-9b4a-3e06d20146c8"",
            ""actions"": [
                {
                    ""name"": ""Player1Movement"",
                    ""type"": ""Value"",
                    ""id"": ""73e699b2-6317-4ac0-b764-6c7e94b5ec87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Player2Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a605fc3f-d461-4ff9-8df2-47abcc10043f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SpawnBall"",
                    ""type"": ""Button"",
                    ""id"": ""ba69a2ec-19e6-44c9-aa28-7619088e8205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6079fecb-8222-447f-b9a8-a8bccc4c430c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3050de4e-7c8b-4aeb-8374-b24564b10f8b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa681765-7736-43d9-a5c7-e86896141771"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player1Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""84e05284-a991-4e2d-b959-8ffc2ec2fbf0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9172d688-b598-46d9-adef-7695def9a0de"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""418d44a6-ffcc-4cea-98b1-5d0ba7264350"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Player2Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7eacaf71-207f-4aa6-865a-6eb95e40ca57"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Player1Movement = m_Player.FindAction("Player1Movement", throwIfNotFound: true);
        m_Player_Player2Movement = m_Player.FindAction("Player2Movement", throwIfNotFound: true);
        m_Player_SpawnBall = m_Player.FindAction("SpawnBall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Player1Movement;
    private readonly InputAction m_Player_Player2Movement;
    private readonly InputAction m_Player_SpawnBall;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Player1Movement => m_Wrapper.m_Player_Player1Movement;
        public InputAction @Player2Movement => m_Wrapper.m_Player_Player2Movement;
        public InputAction @SpawnBall => m_Wrapper.m_Player_SpawnBall;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Player1Movement.started += instance.OnPlayer1Movement;
            @Player1Movement.performed += instance.OnPlayer1Movement;
            @Player1Movement.canceled += instance.OnPlayer1Movement;
            @Player2Movement.started += instance.OnPlayer2Movement;
            @Player2Movement.performed += instance.OnPlayer2Movement;
            @Player2Movement.canceled += instance.OnPlayer2Movement;
            @SpawnBall.started += instance.OnSpawnBall;
            @SpawnBall.performed += instance.OnSpawnBall;
            @SpawnBall.canceled += instance.OnSpawnBall;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Player1Movement.started -= instance.OnPlayer1Movement;
            @Player1Movement.performed -= instance.OnPlayer1Movement;
            @Player1Movement.canceled -= instance.OnPlayer1Movement;
            @Player2Movement.started -= instance.OnPlayer2Movement;
            @Player2Movement.performed -= instance.OnPlayer2Movement;
            @Player2Movement.canceled -= instance.OnPlayer2Movement;
            @SpawnBall.started -= instance.OnSpawnBall;
            @SpawnBall.performed -= instance.OnSpawnBall;
            @SpawnBall.canceled -= instance.OnSpawnBall;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnPlayer1Movement(InputAction.CallbackContext context);
        void OnPlayer2Movement(InputAction.CallbackContext context);
        void OnSpawnBall(InputAction.CallbackContext context);
    }
}
